var searchIndex = {};
searchIndex['chip8_vm'] = {"items":[[0,"","chip8_vm","Virtual machine for the CHIP-8 programming language",null,null],[5,"version","","Returns the version of this crate in the format `MAJOR.MINOR.PATCH`.",null,{"inputs":[],"output":{"name":"str"}}],[0,"error","","`std:error:Error` implementations",null,null],[4,"Chip8Error","chip8_vm::error","`Error` variants for public errors in this crate",null,null],[13,"Io","","I/O error",0,null],[11,"fmt","","",0,{"inputs":[{"name":"chip8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"chip8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"chip8error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"chip8error"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"chip8error"},{"name":"error"}],"output":{"name":"chip8error"}}],[0,"instructions","chip8_vm","Raw and high-level instruction abstractions",null,null],[3,"Nibble","chip8_vm::instructions","A nibble (hex digit)",null,null],[12,"bits","","",1,null],[3,"Addr","","Absolute memory address",null,null],[12,"bits","","",2,null],[3,"RawInstruction","","Raw instruction",null,null],[4,"Register","","A register index/name",null,null],[13,"V0","","",3,null],[13,"V1","","",3,null],[13,"V2","","",3,null],[13,"V3","","",3,null],[13,"V4","","",3,null],[13,"V5","","",3,null],[13,"V6","","",3,null],[13,"V7","","",3,null],[13,"V8","","",3,null],[13,"V9","","",3,null],[13,"VA","","",3,null],[13,"VB","","",3,null],[13,"VC","","",3,null],[13,"VD","","",3,null],[13,"VE","","",3,null],[13,"VF","","",3,null],[4,"Instruction","","High-level instruction",null,null],[13,"Sys","","Jumps to machine subroutine at `Addr`.",4,null],[13,"Clear","","Clears the screen.",4,null],[13,"Return","","Returns from a subroutine",4,null],[13,"Jump","","Jumps to `Addr`",4,null],[13,"Call","","Calls subroutine at `Addr`",4,null],[13,"SkipEqualK","","Skips the next instructions if `Vx` equals `Byte`",4,null],[13,"SkipNotEqualK","","Skips the next instruction if `Vx` does not equal `Byte`",4,null],[13,"SkipEqual","","Skips the next instruction if `Vx` and `Vy` are equal",4,null],[13,"SetK","","Sets `Vy` to `Byte`",4,null],[13,"AddK","","Adds `Byte` to `Vx`, then stores the result in `Vx`",4,null],[13,"Set","","Stores `Vy` in `Vx`",4,null],[13,"Or","","Performs a bitwise OR (`|`) of `Vx` and `Vy`, then stores the result in `Vx`",4,null],[13,"And","","Performs a bitwise AND (`&`) of `Vx` and `Vy`, then stores the result in `Vx`",4,null],[13,"XOr","","Performs a bitwise XOR (`^`) of `Vx` and `Vy`, then stores the result in `Vx`",4,null],[13,"Add","","Adds `Vx` and `Vy`, then stores the result in in `Vx`.",4,null],[13,"Sub","","Subtracts `Vy` from `Vx`, then stores the result in `Vx`.",4,null],[13,"ShiftRight","","Shifts `Vy` right by one bit, then stores the result in `Vx`.",4,null],[13,"SubInv","","Subtracts `Vx` from `Vy`, then stores the result in `Vx`.",4,null],[13,"ShiftLeft","","Shifts `Vy` left by one bit, then stores the result in `Vx`.",4,null],[13,"SkipNotEqual","","Skips the next instruction if `Vx` and `Vy` are not equal",4,null],[13,"LoadI","","Sets the `I` register to `Addr`",4,null],[13,"LongJump","","Jumps to `V0 + Addr`",4,null],[13,"Rand","","Sets `Vx` to a random byte ANDed with `Byte`",4,null],[13,"Draw","","Draws the sprite with `Nibble` bytes of data from the `I` register at position `(Vx, Vy)`.",4,null],[13,"SkipPressed","","Skips the next instruction if key `Vx` is pressed",4,null],[13,"SkipNotPressed","","Skips the next instruction if key `Vx` is not pressed",4,null],[13,"GetTimer","","Stores the value of the `delay timer` in `Vx`",4,null],[13,"WaitKey","","Stops execution until a key is pressed, then stores that key in `Vx`",4,null],[13,"SetTimer","","Sets the `delay timer` to `Vx`",4,null],[13,"SetSoundTimer","","Sets the `sound timer` to `Vx`",4,null],[13,"AddToI","","Adds `Vx` and the `I` register, then stores the result in `I`",4,null],[13,"LoadHexGlyph","","Stores the address of the hexadecimal digit `Vx` in the `I` register",4,null],[13,"StoreBCD","","Stores the binary-coded decimal representation of `Vx` at address `I`, `I + 1` and `I + 2`",4,null],[13,"StoreRegisters","","Stores the registers `V0` to `Vx` inclusive at address `I`.",4,null],[13,"LoadRegisters","","Reads the registers `V0` to `Vx` inclusive from address `I`.",4,null],[13,"Unknown","","Placeholder for an unknown or illegal instruction.",4,null],[6,"Vx","","First register in an opcode",null,null],[6,"Vy","","Second register in an opcode",null,null],[6,"Byte","","A byte",null,null],[11,"fmt","","",3,{"inputs":[{"name":"register"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"register"}],"output":{"name":"register"}}],[11,"new","","",3,{"inputs":[{"name":"register"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"nibble"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"nibble"}],"output":{"name":"nibble"}}],[11,"new","","Creates a new `Nibble`, ignoring any high bits",1,{"inputs":[{"name":"nibble"},{"name":"u8"}],"output":{"name":"nibble"}}],[11,"fmt","","",2,{"inputs":[{"name":"addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"addr"}],"output":{"name":"addr"}}],[11,"new","","Creates a new `Addr`, ignoring any high bits",2,{"inputs":[{"name":"addr"},{"name":"u16"}],"output":{"name":"addr"}}],[11,"clone","","",5,{"inputs":[{"name":"rawinstruction"}],"output":{"name":"rawinstruction"}}],[11,"new","","Creates a new raw instruction without any checks of the `bits`",5,{"inputs":[{"name":"rawinstruction"},{"name":"u16"}],"output":{"name":"rawinstruction"}}],[11,"bits","","The *raw bits*",5,{"inputs":[{"name":"rawinstruction"}],"output":{"name":"u16"}}],[11,"addr","","The *address bits* part",5,{"inputs":[{"name":"rawinstruction"}],"output":{"name":"addr"}}],[11,"x","","The *`Vx` register-index* part, i.e. `0xE` is `VE`",5,{"inputs":[{"name":"rawinstruction"}],"output":{"name":"vx"}}],[11,"y","","The *`Vy` register-index* part, i.e. `0xE` is `VE`",5,{"inputs":[{"name":"rawinstruction"}],"output":{"name":"vy"}}],[11,"n_high","","The *high nibble* part",5,{"inputs":[{"name":"rawinstruction"}],"output":{"name":"nibble"}}],[11,"n_low","","The *low nibble* part",5,{"inputs":[{"name":"rawinstruction"}],"output":{"name":"nibble"}}],[11,"k","","The *`k` byte* part",5,{"inputs":[{"name":"rawinstruction"}],"output":{"name":"byte"}}],[11,"fmt","","",4,{"inputs":[{"name":"instruction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"instruction"}],"output":{"name":"instruction"}}],[11,"from_raw","","Creates a new instruction from raw bits,\nor `Instruction::Unknown` if no valid match could be found",4,{"inputs":[{"name":"instruction"},{"name":"rawinstruction"}],"output":{"name":"instruction"}}],[0,"vm","chip8_vm","Virtual machine implementation",null,null],[3,"Vm","chip8_vm::vm","Virtual machine",null,null],[11,"new","","Creates a new `Vm` instance with default state",6,{"inputs":[{"name":"vm"}],"output":{"name":"vm"}}],[11,"load_rom","","Loads the ROM contents from `reader` into RAM at the program start address",6,{"inputs":[{"name":"vm"},{"name":"read"}],"output":{"name":"result"}}],[11,"dump_ram","","",6,{"inputs":[{"name":"vm"},{"name":"write"}],"output":null}],[11,"beeping","","Returns `True` if the sound timer is active",6,{"inputs":[{"name":"vm"}],"output":{"name":"bool"}}],[11,"set_key","","Marks the key with index `idx` as being set",6,{"inputs":[{"name":"vm"},{"name":"u8"}],"output":null}],[11,"unset_key","","Marks they key with index `idx` as being unset",6,{"inputs":[{"name":"vm"},{"name":"u8"}],"output":null}],[11,"step","","Executes remaining instructions since the last step",6,{"inputs":[{"name":"vm"},{"name":"f32"}],"output":null}],[11,"screen_rows","","Returns the pixel rows of the screen",6,{"inputs":[{"name":"vm"}],"output":{"name":"chunks"}}],[11,"print_screen","","Prints the current screen pixels to `stdout`",6,{"inputs":[{"name":"vm"}],"output":null}]],"paths":[[4,"Chip8Error"],[3,"Nibble"],[3,"Addr"],[4,"Register"],[4,"Instruction"],[3,"RawInstruction"],[3,"Vm"]]};
initSearch(searchIndex);
